name: Closed Pull Requests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *" # JTS 04:00

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: # FIXME
          - ubuntu-latest
          - self-hosted
        flavor: # FIXME
          - dev
          - prod
        package: # FIXME
          - client_app

    runs-on: ${{ matrix.os }}

    steps:
      ### Setup ###
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-flutter
        with:
          use_local_dart: ${{ matrix.os == 'self-hosted' }}

      - name: Gradle Cache
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ matrix.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-v1

      - uses: ./.github/actions/setup-android-signing
        if: matrix.os == 'ubuntu-latest'
        with:
          package: ${{ matrix.package }}
          signing_configs_base64: ${{ secrets.SIGNING_CONFIGS_CLIENT_APP_BASE64 }}
          upload_keystore_base64: ${{ secrets.UPLOAD_KEYSTORE_CLIENT_APP_BASE64 }}

      - name: Setup Firebase CLI Dev
        uses: ./.github/actions/setup-firebase-cli
        if: matrix.flavor == 'dev' && matrix.os == 'ubuntu-latest'
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER_DEV }}
          service_account: ${{ vars.SERVICE_ACCOUNT_DEV }}

      - name: Setup Firebase CLI Prod
        uses: ./.github/actions/setup-firebase-cli
        if: matrix.flavor == 'prod' && matrix.os == 'ubuntu-latest'
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ vars.SERVICE_ACCOUNT_PROD }}

      ### Build ###
      - name: Build Android Dev
        if: matrix.os == 'ubuntu-latest' && matrix.flavor == 'dev'
        run: melos run build:apk:dev --no-select

      - name: Build Android Prod
        if: matrix.os == 'ubuntu-latest' && matrix.flavor == 'prod'
        run: melos run build:appbundle:prod --no-select

      - name: Build iOS Dev
        if: matrix.os == 'self-hosted' && matrix.flavor == 'dev'
        run: melos run build:ios:no-codesign:dev --no-select

      - name: Build iOS Prod
        if: matrix.os == 'self-hosted' && matrix.flavor == 'prod'
        run: melos run build:ios:no-codesign:prod --no-select
