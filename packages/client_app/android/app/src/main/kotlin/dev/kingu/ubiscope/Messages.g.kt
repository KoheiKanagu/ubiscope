// Copyright 2023 kingu.dev. All rights reserved.
// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.kingu.ubiscope

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class WiFi (
  /**
   * A timestamp representing when the beacon was observed.
   * ISO 8601 formatted string
   */
  val timestamp: String,
  /**
   * The network name.
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#SSID
   */
  val ssid: String,
  /**
   * The address of the access point.
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#BSSID
   */
  val bssid: String,
  /**
   * The detected signal level in dBm, also known as the RSSI.
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#level
   */
  val rssi: Long,
  /**
   * The center frequency of the primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#frequency
   */
  val frequency: Long,
  /**
   * Describes the authentication, key management, and encryption schemes supported by the access point.
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#capabilities
   */
  val capabilities: String,
  /**
   * Not used if the AP bandwidth is 20 MHz If the AP use 40, 80, 160 or 320MHz, this is the center frequency (in MHz) if the AP use 80 + 80 MHz, this is the center frequency of the first segment (in MHz)
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#centerFreq0
   */
  val centerFreq0: Long,
  /**
   * Only used if the AP bandwidth is 80 + 80 MHz if the AP use 80 + 80 MHz, this is the center frequency of the second segment (in MHz)
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#centerFreq1
   */
  val centerFreq1: Long,
  /**
   * AP Channel bandwidth
   *
   * https://developer.android.com/reference/android/net/wifi/ScanResult#channelWidth
   */
  val channelWidth: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): WiFi {
      val timestamp = list[0] as String
      val ssid = list[1] as String
      val bssid = list[2] as String
      val rssi = list[3].let { if (it is Int) it.toLong() else it as Long }
      val frequency = list[4].let { if (it is Int) it.toLong() else it as Long }
      val capabilities = list[5] as String
      val centerFreq0 = list[6].let { if (it is Int) it.toLong() else it as Long }
      val centerFreq1 = list[7].let { if (it is Int) it.toLong() else it as Long }
      val channelWidth = list[8].let { if (it is Int) it.toLong() else it as Long }
      return WiFi(timestamp, ssid, bssid, rssi, frequency, capabilities, centerFreq0, centerFreq1, channelWidth)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
      ssid,
      bssid,
      rssi,
      frequency,
      capabilities,
      centerFreq0,
      centerFreq1,
      channelWidth,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Beacon (
  /**
   * The UUID that the observed beacon transmitted.
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/3183017-uuid
   */
  val uuid: String,
  /**
   * The major value that the observed beacon transmitted.
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/1621418-major
   */
  val major: Long,
  /**
   * The minor value that the observed beacon transmitted.
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/1621558-minor
   */
  val minor: Long,
  /**
   * The received signal strength of the beacon, measured in decibels.
   * May be 0 for some reason. It is a specification of CoreLocation.
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/1621557-rssi
   */
  val rssi: Long,
  /**
   * A timestamp representing when the beacon was observed.
   * ISO 8601 formatted string
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/3183021-timestamp
   */
  val timestamp: String,
  /**
   * The accuracy of the proximity value, measured in meters from the beacon.
   *
   * https://developer.apple.com/documentation/corelocation/clbeacon/1621551-accuracy
   */
  val accuracy: Double,
  /**
   * Constants that reflect the relative distance to a beacon.
   *
   * https://developer.apple.com/documentation/corelocation/clproximity
   */
  val proximity: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Beacon {
      val uuid = list[0] as String
      val major = list[1].let { if (it is Int) it.toLong() else it as Long }
      val minor = list[2].let { if (it is Int) it.toLong() else it as Long }
      val rssi = list[3].let { if (it is Int) it.toLong() else it as Long }
      val timestamp = list[4] as String
      val accuracy = list[5] as Double
      val proximity = list[6].let { if (it is Int) it.toLong() else it as Long }
      return Beacon(uuid, major, minor, rssi, timestamp, accuracy, proximity)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      uuid,
      major,
      minor,
      rssi,
      timestamp,
      accuracy,
      proximity,
    )
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WiFiHostApi {
  fun isScanThrottleEnabled(): Boolean
  fun startScan(): Boolean
  fun stopScan()

  companion object {
    /** The codec used by WiFiHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `WiFiHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: WiFiHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WiFiHostApi.isScanThrottleEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isScanThrottleEnabled())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WiFiHostApi.startScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.startScan())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WiFiHostApi.stopScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopScan()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object WiFiFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WiFi.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is WiFi -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class WiFiFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by WiFiFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      WiFiFlutterApiCodec
    }
  }
  fun onReceived(resultsArg: List<WiFi>, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.WiFiFlutterApi.onReceived", codec)
    channel.send(listOf(resultsArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BeaconHostApi {
  /**
   * start scanning beacons
   *
   * [uuid] is required
   * [major] and [minor] are optional. If not specified, all majors and minors are targeted.
   */
  fun startScan(uuid: String, major: Long?, minor: Long?): Boolean
  fun stopScan()

  companion object {
    /** The codec used by BeaconHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BeaconHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BeaconHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BeaconHostApi.startScan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uuidArg = args[0] as String
            val majorArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            val minorArg = args[2].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.startScan(uuidArg, majorArg, minorArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BeaconHostApi.stopScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopScan()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object BeaconFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Beacon.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Beacon -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BeaconFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BeaconFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BeaconFlutterApiCodec
    }
  }
  fun onReceived(resultsArg: List<Beacon>, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BeaconFlutterApi.onReceived", codec)
    channel.send(listOf(resultsArg)) {
      callback()
    }
  }
}
